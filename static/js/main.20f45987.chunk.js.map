{"version":3,"sources":["utils.js","MovieCard.js","MovieDetails.js","MovieList.js","Modal.js","Searchbar.js","Paginator.js","App.js","reportWebVitals.js","index.js"],"names":["getMoviesByName","search","a","page","type","apiKey","process","url","fetch","res","json","data","getMovieDetailsById","movieId","truncate","str","len","substring","MovieCard","props","className","onClick","src","posterUrl","title","MovieDetails","rated","runtime","genre","rating","plot","actors","MovieList","list","render","map","item","Modal","show","onClose","children","style","display","Searchbar","handleTypeChange","e","setState","target","value","state","searchTerm","handleChange","bind","handleSubmit","preventDefault","this","onSearchSubmit","onTypeSubmit","Form","inline","onSubmit","Row","Control","placeholder","onChange","as","id","custom","name","Button","variant","Component","Paginator","currentPage","numPages","onPrevPage","onNextPage","App","openModal","modalOpen","isLoading","movies","error","currMovie","incrementPage","decrementPage","prevState","setTimeout","movieData","prevProps","console","log","movie","Search","Title","Poster","Type","onMovieClicked","imdbID","Math","ceil","totalResults","Rated","Runtime","Genre","Ratings","Value","Plot","Actors","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20f45987.chunk.js","sourcesContent":["\n\nexport const getMoviesByName = async (search, page=1, type) => {\n    const baseUrl = 'https://www.omdbapi.com'\n    const apiKey = process.env.REACT_APP_OMDB_API_KEY;\n    const url = `${baseUrl}/?apikey=${apiKey}&s=${search}&page=${page}${type ? `&type=${type}` : ''}`\n    \n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n};\n\nexport const getMovieDetailsById = async (movieId) => {\n    const baseUrl = 'https://www.omdbapi.com'\n    const apiKey = process.env.REACT_APP_OMDB_API_KEY;\n    const url = `${baseUrl}/?apikey=${apiKey}&i=${movieId}`\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n};\n\nexport const truncate = (str, len = 10) => {\n    return `${str.substring(0, len)}...`\n}","\nimport React from 'react'\n\nimport {truncate} from './utils';\n\nconst MovieCard = (props) => {\n    return (\n        <div className=\"movie-card\" onClick={props.onClick}>\n            <img src={props.posterUrl} />\n            <p>{truncate(props.title, 15)}</p>\n            <p>{props.type}</p>\n            \n        </div>\n    )\n}\n\nexport default MovieCard;","\n\n\nconst MovieDetails = ( { posterUrl, title, rated, runtime, genre = 'Unknown', rating = 0, plot, actors } ) => {\n    return (\n        <div className=\"movie-details\">\n            <div className=\"poster\">\n                <img src={posterUrl} />\n            </div>\n            <div>\n                <div className=\"header\">\n                    <p className=\"title\">{title}</p>\n                    <p className=\"rating\">{rating ?? 'N/A'}</p>\n                </div>\n                <ul>\n                    <li>{runtime} min</li>\n                    <li>{rated}</li>\n                    <li>{genre}</li>\n                </ul>\n                <div className=\"info-section\">\n                    <p className=\"title\">Plot</p>\n                    <p>{plot}</p>\n                </div>\n                <div className=\"info-section\">\n                    <p className=\"title\">Actors</p>\n                    <p>{actors}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieDetails","import React from 'react';\n\n\nconst MovieList = ({ list=[], render }) => {\n    return list.map((item) => {\n        return <>{render(item)}</>\n    });\n};\n\n\n\nexport default MovieList","\n\n\nconst Modal = ({show=false, onClose, children}) => {\n    return (\n        <div className=\"modal\" style={{display: show ? 'flex' : 'none'}}>\n            <div className=\"modal-content\">\n                <div>\n                    <button onClick={onClose}>X</button>\n                </div>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button'; \nimport Form from 'react-bootstrap/Form'\n\n\n\nclass Searchbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchTerm: '',\n            type: ''\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onSearchSubmit(this.state.searchTerm);\n        this.props.onTypeSubmit(this.state.type)\n        this.setState({\n            searchTerm: '',\n        })\n    }\n\n\n    handleChange(e) {\n        this.setState({\n            searchTerm: e.target.value,\n        });\n    }\n\n    handleTypeChange = (e) => {\n        this.setState({\n            type: e.target.value\n        })\n    }\n\n    render() {\n    return (\n        <div className=\"search-form\">\n        <Form inline onSubmit={this.handleSubmit}>\n            <Form.Row>\n                <Form.Control placeholder=\"Search Title\"\n                value={this.state.searchTerm} onChange={this.handleChange}/>\n                <Form.Control\n                as=\"select\"\n                className=\"mr-sm-2\"\n                id=\"search-type\"\n                custom\n                name='search-type' value={this.state.type} onChange={this.handleTypeChange}\n                >\n                    <option value='movie'>Movie</option>\n                    <option value='series'>Series</option>\n                    <option value='episode'>Episode</option>\n                </Form.Control>\n                <Button onClick={this.handleSubmit} variant=\"primary\" className=\"btn-primary\">Search</Button>\n            </Form.Row>\n        </Form >\n        </div>\n        );\n    }\n}\n\n\n\nexport default Searchbar;","\n\n\nconst Paginator = ({ currentPage, numPages, onPrevPage, onNextPage }) => {\n    return (\n        <div className=\"paginator\">\n            <p>{currentPage} of {numPages}</p>\n            <button onClick={onPrevPage}>&lt;</button>\n            <button onClick={onNextPage}>&gt;</button>\n        </div>\n    )\n}\n\nexport default Paginator;","import React from 'react';\nimport MovieCard from './MovieCard';\nimport MovieDetails from './MovieDetails';\nimport { getMoviesByName, getMovieDetailsById } from './utils';\nimport MovieList from './MovieList'\nimport Modal from './Modal'\nimport Searchbar from './Searchbar'\nimport Paginator from './Paginator'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: 'batman',\n      isLoading: false, \n      movies: null,\n      error: null,\n      modalOpen: false,\n      currMovie: null,\n      page: 1,\n      type: ''\n    }\n    this.openModal = this.openModal.bind(this)\n    this.incrementPage = this.incrementPage.bind(this)\n    this.decrementPage = this.decrementPage.bind(this)\n    this.onSearchSubmit = this.onSearchSubmit.bind(this)\n  }\n\n  openModal = (show=false) => {\n    this.setState({\n      modalOpen: show\n    })\n  }\n\n  incrementPage() {\n    this.setState((prevState) => {\n      return {\n        page: prevState.page + 1\n      }\n    })\n  }\n\n  decrementPage() {\n    this.setState((prevState) => {\n      return {\n        page: prevState.page - 1\n      }\n    })\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    setTimeout( async () => {\n      try {\n        const movieData = await getMoviesByName(this.state.searchTerm, this.state.page, this.state.type)\n        this.setState({\n          isLoading: false,\n          movies: movieData,\n          error: null\n        })\n      } catch (error) {\n        this.setState({\n          isLoading: false,\n          movies: [],\n          error: error\n        })\n      }\n    }, 1000);\n    \n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if(prevState.page !== this.state.page || prevState.searchTerm !== this.state.searchTerm || prevState.type !== this.state.type) {\n    try {\n      const movieData = await getMoviesByName(this.state.searchTerm, this.state.page, this.state.type)\n      console.log(\"New data fetched\")\n      this.setState({\n        isLoading: false,\n        movies: movieData,\n        error: null \n      })\n    } catch (error) {\n      this.setState({\n        isLoading: false,\n        movies: [],\n        error: error\n      })\n    }\n  }\n  }\n\n  async onMovieClicked(movieId) {\n    const movie = await getMovieDetailsById(movieId)\n    this.setState({\n      currMovie: movie,\n      modalOpen: true\n    })\n\n  }\n\n  onTypeSubmit = (type) => {\n    this.setState({\n      type: type\n    })\n  }\n\n  onSearchSubmit(searchTerm) {\n    this.setState({\n      searchTerm:  searchTerm\n    })\n} \n\n  render() {\n\n    const {currMovie} = this.state;\n\n    return (\n      <>\n        { this.state.isLoading \n          ? <h1>Loading data</h1>\n          : (\n            <>\n              <h1 id='title'>MovieFind</h1>\n              <Searchbar onSearchSubmit={this.onSearchSubmit}\n              onTypeSubmit={this.onTypeSubmit}\n              />\n              <MovieList list={this.state.movies?.Search}\n              render={(movie) => (\n              <MovieCard\n                title={movie.Title} \n                posterUrl={movie.Poster} \n                type={movie.Type}\n                onClick={() => this.onMovieClicked(movie.imdbID)}\n              />\n              )}\n              />\n              <Paginator \n                currentPage={this.state.page}\n                numPages={Math.ceil(this.state.movies?.totalResults / 10)} \n                onPrevPage={this.decrementPage} \n                onNextPage={this.incrementPage}/>\n              <Modal show={this.state.modalOpen} onClose={() => this.openModal(false)}>\n              <MovieDetails \n                posterUrl={currMovie?.Poster}\n                title={currMovie?.Title}\n                rated={currMovie?.Rated}\n                runtime={currMovie?.Runtime}\n                genre={currMovie?.Genre}\n                rating={currMovie?.Ratings[0].Value}\n                plot={currMovie?.Plot}\n                actors={currMovie?.Actors}\n                />\n              </Modal>\n            </>\n          ) \n        }\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}